<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Itamae on itkq.jp</title>
    <link>https://itkq.jp/tags/itamae/</link>
    <description>Recent content in Itamae on itkq.jp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sun, 19 Mar 2017 19:25:53 +0900</lastBuildDate>
    
	<atom:link href="https://itkq.jp/tags/itamae/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>itamae コードリーディング</title>
      <link>https://itkq.jp/blog/2017/03/19/itamae-reading/</link>
      <pubDate>Sun, 19 Mar 2017 19:25:53 +0900</pubDate>
      
      <guid>https://itkq.jp/blog/2017/03/19/itamae-reading/</guid>
      <description>元々は NeoVim を導入しようとしていた．その一環で，dotfiles を良い感じにしようとしていて，mitamae によるプロビジョニング設定の k0kubun/dotfiles から fork したものを整理していた．NeoBundle の NeoVim 対応版である dein.vim を導入する際，curl が必要だった．itamae の Resource ドキュメントを読むと，http_request というリソースがあった．これ使えば Docker の ADDコマンド的なことできるのかなと思ったけど詳細が書いてなくて，そういえば itamae 自体どうやって動いてるんだと気になったので読むことにした．
itamae-kitchen/itamae/
Code reading bin/itamae Itamae::CLI.start を呼ぶ．
lib/itamae/cli.rb Itamae::CLI は CLI gem Thor を継承している． 実行環境 (backend_type) は3つあり，local, ssh, docker である．必要としていて，かつ他より単純そうな local を続けて読む．
def local(*recipe_files) if recipe_files.empty? raise &amp;quot;Please specify recipe files.&amp;quot; end run(recipe_files, :local, options) end  def run(recipe_files, backend_type, options) runner = Runner.run(recipe_files, backend_type, options) if options[:detailed_exitcode] &amp;amp;&amp;amp; runner.</description>
    </item>
    
  </channel>
</rss>
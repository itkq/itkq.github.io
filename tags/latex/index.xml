<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LaTeX on itkq.jp</title><link>https://itkq.jp/tags/latex/</link><description>Recent content in LaTeX on itkq.jp</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Sun, 19 Nov 2017 02:51:49 +0900</lastBuildDate><atom:link href="https://itkq.jp/tags/latex/index.xml" rel="self" type="application/rss+xml"/><item><title>Vim + LaTeX でいい感じに修論を書く</title><link>https://itkq.jp/blog/2017/11/19/thesis-vim-latex/</link><pubDate>Sun, 19 Nov 2017 02:51:49 +0900</pubDate><guid>https://itkq.jp/blog/2017/11/19/thesis-vim-latex/</guid><description>そろそろ修論を書く季節になった。もちろん Vim と LaTeX で書くつもりだが、ページ数が多くなるとコンパイルに時間がかかって不都合なので、章ごとに分割コンパイルしたいと考えた。 分割した LaTeX ファイルを subfiles を使ってコンパイルする - Qiita が見つかったが、これまで通り Skim で 1 つのファイルをライブプレビューしたかったので、一時的な .tex ファイルを生成してコンパイルする latexmk のラッパーを書いた。
次のようにセッティングしておく。
$ tree -a . ├── .config │ └── latexmk.yml ├── header.tex ├── introduction.tex ├── main.tex └── related_work.tex 1 directory, 5 files $ cat .config/latexmk.yml output_file: output.tex header: header.tex include_files: - introduction.tex - related_work.tex $ cat main.tex \input{introduction} \input{related_work} header.tex には \begin{document} より上の設定を書く。実際のラッパースクリプトは以下。 .config/latexmk.yml がある場合は、いい感じに \begin{document} &amp;hellip; \end{document} を生成してコンパイルする。</description></item><item><title>LaTeXiTのCLIみたいなのを書いた</title><link>https://itkq.jp/blog/2016/10/27/latexit%E3%81%AEcli%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%81%AE%E3%82%92%E6%9B%B8%E3%81%84%E3%81%9F/</link><pubDate>Thu, 27 Oct 2016 22:14:40 +0900</pubDate><guid>https://itkq.jp/blog/2016/10/27/latexit%E3%81%AEcli%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%81%AE%E3%82%92%E6%9B%B8%E3%81%84%E3%81%9F/</guid><description>LaTeXiT というTeX形式の数式を入力するとTeX形式の画像を出力するツールを知った．
研究発表のスライドを作る場合に，TeX形式の画像を貼り付けたいことがあり，早速インストールした．
最近のVim+LaTeX事情 に書いたように，最近はTexLiveのDockerイメージでLaTeX文書をコンパイルしている．
LaTeXiTのコンパイル設定をカスタマイズすれば対応できると思ったが，うまくいかなかった． コンパイルスクリプトでは，作業ディレクトリをマウントしてDockerイメージのコンパイルバイナリを走らせている．LaTeXiTが実行するコンパイルコマンドは，一時的に作成した /var/folders/&amp;hellip;/.tex を絶対参照しており，その部分は書き換えようがなかった．
LaTeXiTの動作は，コンパイル後にBounding boxを計算してトリミングして各種画像に変換する感じで作れそうだったのでCLIとして作った．
文字列をクリップボードにコピーする pbcopy は知っていたが，画像をコピーするものはないかと探したところ impbcopy があった． これを利用して，実行するとクリップボード中の文字列に対応するTeX形式の画像をクリップボードにコピーするので，サクッと使える感じになった．
本当はPopclipのExtensionとして作りたかったけどうまくいかなかった😇</description></item><item><title>最近のVim+LaTeX事情</title><link>https://itkq.jp/blog/2016/09/04/vim-latex/</link><pubDate>Sun, 04 Sep 2016 14:29:25 +0900</pubDate><guid>https://itkq.jp/blog/2016/09/04/vim-latex/</guid><description>メインで使っているのはMacBookPro Late 2013だが（そろそろ買い換えたい）， MacBookPro Early 2015をバイト先で支給されて自由に使えることになったので， LaTeX環境を構築しようと思った．
MacTexをインストールしようと思っていたけど，「それDockerでよくない？」と言われて確かに，となった．
なぜ今まで気が付かなかったんだろう．
&amp;ldquo;texlive docker&amp;rdquo; で適当に検索をかけると既存のイメージがヒットした．
harshjv/texlive-2015 public - Docker Hub
これをpullして手持ちの.texをコンパイルしてみると，includegraphicsで エラーを吐かれて画像が全く出力されなかった．
どうやらImageMagickあたりが足りていないようだったので， 必要なパッケージを追加インストールするだけのDockerfileを作ってビルドしたらコンパイル通った．
GitHub - itkq/docker-texlive2015
これまでVimでLaTeXのコンパイルは，Quickrunを使ってlatexmkを呼ぶように設定していた． そのため，Docker上のlatexmkを呼ぶように設定を変更する．
パスの通った場所に次のスクリプトを作成して実行権限を与える．
~/bin/latexmk
. ~/bin/docker-latex.sh init docker run --rm -v $(pwd):/var/texlive $(get_image_name) latexmk ~/bin/docker-latex.sh
#!/usr/bin/env bash function get_machine_name() { echo dev } function get_image_name() { echo texlive2015 } function init() { local MACHINE=$(get_machine_name) if ! docker-machine ls | grep $MACHINE | grep -q &amp;#34;Running&amp;#34;; then docker-machine start $MACHINE fi docker ps &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 if [ $?</description></item></channel></rss>
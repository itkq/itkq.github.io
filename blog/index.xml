<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on itkq.jp</title><link>https://itkq.jp/blog/</link><description>Recent content in Blogs on itkq.jp</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Thu, 31 Dec 2020 18:14:22 +0900</lastBuildDate><atom:link href="https://itkq.jp/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>2020年振り返り</title><link>https://itkq.jp/blog/2020/12/31/2020-retrospective/</link><pubDate>Thu, 31 Dec 2020 18:14:22 +0900</pubDate><guid>https://itkq.jp/blog/2020/12/31/2020-retrospective/</guid><description>&lt;h1 id="仕事">仕事&lt;/h1>
&lt;p>コロナ禍でワークスタイルは大きく変わらなかった。これまで稼働時間の 1/3 程度 WFH していたのが、すべて WFH になった。結果、自分はどちらかといえば物理出社したい気持ちがあることが分かった。自分にとっての通勤とは、家から会社まで徒歩で行けるぐらいの距離だったので、通勤で消耗しないことは前提ではある。来年も、普通に物理出社できる状況になるとは考えにくいので、在宅業務環境には気を配り、積極的に投資していく。&lt;/p></description></item><item><title>Cross-certificates の整理</title><link>https://itkq.jp/blog/2020/11/12/cross-certificates-%E3%81%AE%E6%95%B4%E7%90%86/</link><pubDate>Thu, 12 Nov 2020 23:23:15 +0900</pubDate><guid>https://itkq.jp/blog/2020/11/12/cross-certificates-%E3%81%AE%E6%95%B4%E7%90%86/</guid><description>&lt;p>cross-certificates は &lt;a href="https://itkq.jp/blog/2020/06/20/x509-chain/#%E3%82%AF%E3%83%AD%E3%82%B9%E8%A8%BC%E6%98%8E%E6%9B%B8" target="_blank">https://itkq.jp/blog/2020/06/20/x509-chain/#クロス証明書&lt;/a> で触れたが、最近混乱したので整理する。RFC 5280 によれば cross-certificates の定義は次の通りで非常にシンプルである。&lt;/p>
&lt;blockquote>
&lt;p>Cross-certificates are CA certificates in which the issuer and subject are different entities. Cross-certificates describe a trust relationship between
the two CAs.&lt;/p>
&lt;/blockquote>
&lt;p>先の記事での署名関係は以下であった。この例では、USERTrust CA が「クロスルート証明書」で、USERTrust CA をトラストアストアに持っていない古いクライアントのために AddTrust CA root が USERTrust を署名し、トラストチェーンを構築できるようにするものだった。互換性を考慮してこうなっている。&lt;/p></description></item><item><title>Kubernetes を始めた</title><link>https://itkq.jp/blog/2020/07/29/k8s-getting-started/</link><pubDate>Wed, 29 Jul 2020 23:09:04 +0900</pubDate><guid>https://itkq.jp/blog/2020/07/29/k8s-getting-started/</guid><description>&lt;h2 id="動機">動機&lt;/h2>
&lt;p>最近趣味でつくる Web サービスは、AWS 上のサーバレス構成 (典型的には CloudFront + API Gateway + Lambda + DynamoDB) にしていて、コスパがめちゃめちゃ良く不満はない。が、Web 以外のワークロードも雑に動かしたいときがあり、できればなるべく安く済ませたい。ランタイムとしてはやはり Docker コンテナになるんだろうけど、ECS Fargate は安くなったものの個人的にはまだ高くて使いたくない。結局ランニングコストを避けられないのなら、コストを抑えつつ、勉強も兼ねて Kubernetes ってやつを触ってみたくなった。仕事ではまったく使わないものの、Kubernetes 自体は学生時代に少し学んだり触ったことがあった (後輩が研究室のインフラを K8s にして運用してた) ので、概念とかは知っているつもりだった一方、自分で運用したことはなかった。&lt;/p></description></item><item><title>一見不可解な TLS 証明書失効</title><link>https://itkq.jp/blog/2020/06/20/x509-chain/</link><pubDate>Sat, 20 Jun 2020 16:30:52 +0900</pubDate><guid>https://itkq.jp/blog/2020/06/20/x509-chain/</guid><description>&lt;p>この記事は、所属する会社の社内ブログに投稿した内容を一部改変したものです。&lt;/p>
&lt;h1 id="遭遇した事象">遭遇した事象&lt;/h1>
&lt;p>Prometheus と &lt;a href="https://github.com/prometheus/blackbox_exporter">https://github.com/prometheus/blackbox_exporter&lt;/a> を使って TLS サーバー証明書の有効性と有効期限を網羅的に監視しています。最近 blackbox_exporter が blog.cookpad.dk:443 の証明書の期限が切れている、と報告してきました。しかし同時に blackbox_exporter は TLS 接続には成功している、と報告していたのです。確認のため、Chrome で &lt;a href="https://blog.cookpad.dk/">https://blog.cookpad.dk/&lt;/a> にアクセスしてみると、問題ありませんでした。Firefox でも同様でした。次に手元の MacBook Pro から cURL してみます。&lt;/p></description></item><item><title>2019年振り返り</title><link>https://itkq.jp/blog/2019/12/07/2019-retrospective/</link><pubDate>Sat, 07 Dec 2019 15:20:22 +0900</pubDate><guid>https://itkq.jp/blog/2019/12/07/2019-retrospective/</guid><description>&lt;h1 id="仕事">仕事&lt;/h1>
&lt;p>2年目 (新卒1.8ヶ月) で引き続き SRE グループで色々をやった。今年は組織やチーム体制が変わったり、メンバーが別のプロジェクトに一時的に参加することになったりということが起きて、これは自分にとってはじめてのことだった。結果、去年までしっかりと理解できていなかった ECS 周りや、自前のバッチ処理システム、非同期ジョブ実行システムといった基盤も運用したり改善することも業務のスコープとなった。基盤勉強会という勉強会を何度かやって大枠をつかんだ後は、業務で必要に応じてコードを読んだり PR を出す過程で理解していった。まだ Fargate は多くのユースケースで実用段階ではなく、大半のコンテナは EC2 で動かす必要があり、それゆえに EC2 インスタンスの管理は ASG や Spot Fleet を使いつつもある程度自前でカバーしていかなければならず、そのためのシステムが多数あることを知って驚いた。このあたりは最近 ASG の機能が増えたり、今後 ECS がよくなっていくことで、いくつかのシステムが不要となりシンプルになっていく可能性はある。&lt;/p></description></item><item><title>英会話を始めて1年弱で辞めた</title><link>https://itkq.jp/blog/2019/05/04/quit-gaba/</link><pubDate>Sat, 04 May 2019 02:27:15 +0900</pubDate><guid>https://itkq.jp/blog/2019/05/04/quit-gaba/</guid><description>&lt;p>少し長くなってしまったがその経緯をまとめた。&lt;/p></description></item><item><title>第4回 WSA 研究会に参加した</title><link>https://itkq.jp/blog/2019/04/14/wsa-4/</link><pubDate>Sun, 14 Apr 2019 11:20:26 +0900</pubDate><guid>https://itkq.jp/blog/2019/04/14/wsa-4/</guid><description>&lt;p>開催概要: &lt;a href="https://websystemarchitecture.hatenablog.jp/entry/2019/02/26/100725">https://websystemarchitecture.hatenablog.jp/entry/2019/02/26/100725&lt;/a>&lt;/p>
&lt;h1 id="自分の発表">自分の発表&lt;/h1>
&lt;!-- raw HTML omitted -->
&lt;p>とくに手持ちの実装や実装構想といったものがなかったため、最近よく考えていたカオスエンジニアリングについての整理を試みた。Netflix による &amp;ldquo;Chaos Engineering&amp;rdquo; ペーパーでは、すでにカオスエンジニアリングと同じようなことを Google や Amazon といった企業はすでにやっていることを知っていてそれをカオスエンジニアリングと名付けたと書いてある。その起源は明らかに「レジリエンス」のキーワードに関係していて、レジリエンスエンジニアリングという体系化された学問があることを知った。&lt;/p></description></item><item><title>Slack 上で AWS への単純な bot 攻撃に対処する</title><link>https://itkq.jp/blog/2019/01/12/banacle/</link><pubDate>Sat, 12 Jan 2019 18:46:24 +0900</pubDate><guid>https://itkq.jp/blog/2019/01/12/banacle/</guid><description>&lt;p>業務で使っているインフラ (AWS) に対して、たまに日本のリソースに対して海外の IP からスパムリクエストや明らかな攻撃が来ることがある。リクエスト元 IP が分散していない場合は IP ベースでブロックで十分である。ブロックするレイヤーはいくつかあるが、最近だと VPC の NACL で ban することが多い。NACL の操作を誤ると事故になりかねないので、業務ではセカンドオピニオンも取り入れつつ操作している。攻撃が判明する度に VPC のコンソールを開きつつチャットで誰かの意見を求めるというのは非効率なので、なんらかのソフトウェアを書くことでいい感じにしたいと思っていた。&lt;/p></description></item><item><title>Envoy proxy と consul-template を使った Fault injection を試した</title><link>https://itkq.jp/blog/2018/09/12/envoy-consul-template-failure-injection-sample/</link><pubDate>Wed, 12 Sep 2018 23:49:16 +0900</pubDate><guid>https://itkq.jp/blog/2018/09/12/envoy-consul-template-failure-injection-sample/</guid><description>&lt;h2 id="モチベーション">モチベーション&lt;/h2>
&lt;p>サービスメッシュのための Side-car proxy として有名な &lt;a href="https://www.envoyproxy.io/" target="_blank">Envoy proxy&lt;/a> (以下 Envoy) がある。Envoy は Observability や Resiliency など便利な機能の他に、Fault Injection 機能を持つ。この Fault injection は、システム全体の可用性を向上させるためのシステム間通信の障害のエミュレートに使われるものであり、これは一般に Chaos Engineering や Resiliency Testing と呼ばれる。&lt;/p></description></item><item><title>OS ほんのちょっとだけ分かるための JOS</title><link>https://itkq.jp/blog/2018/04/08/jos/</link><pubDate>Sun, 08 Apr 2018 18:27:42 +0900</pubDate><guid>https://itkq.jp/blog/2018/04/08/jos/</guid><description>&lt;p>修論を書き終えたあたりから、春休みに何をするか考えていた。4月からソフトウェアエンジニアとして働き、主にインフラの仕事をする予定だったので、まとまった時間が必要かつ将来役に立ちそうなことを考えた。&lt;/p>
&lt;p>ちょうどその頃に turingcomplete.fm を聞いて、OS を学びたい気持ちになった。そうして始めたのが MIT の &lt;a href="https://pdos.csail.mit.edu/6.828/2017/schedule.html" target="_blank">6.828: Operating System Engineering&lt;/a> の授業である。JOS という xv6 ライクな小さい x86 OS のスケルトンが用意されており、必要な部分を実装していくことが課題である。シェルの動作までを完成させた後、最終課題としてパケット送受信かオリジナル機能を実装して終了ということになっている。&lt;/p></description></item><item><title>クックパッド株式会社に新卒入社した</title><link>https://itkq.jp/blog/2018/04/02/join-cookpad/</link><pubDate>Mon, 02 Apr 2018 23:02:18 +0900</pubDate><guid>https://itkq.jp/blog/2018/04/02/join-cookpad/</guid><description>全体会議の自己紹介で、普段は喋れないが酒を飲むと喋れます、そしてこれは社会人になったので克服したいと話したら、その後のウェルカムパーティーで喋れる? 酒飲んでる? と人々が話しかけてくれたので良かった。</description></item><item><title>採用学を読んだ</title><link>https://itkq.jp/blog/2018/03/06/scientific-adopt/</link><pubDate>Tue, 06 Mar 2018 00:24:12 +0900</pubDate><guid>https://itkq.jp/blog/2018/03/06/scientific-adopt/</guid><description>&lt;p>採用学を読んだ。この本では、採用を定義した上で、現代の日本における採用事情の考察・最近の採用手法の変化・より良い採用のための考え方などが述べられており、一読すべき価値のある本だと思う。&lt;/p>
&lt;p>この記事では、一応新卒採用を経験した身として、就活時に浮かんだいくつかの疑問を、採用学を読んで上で改めて考えていく。それが正解かどうかは分からない。書き終えてみると当たり前のことを言っているようにも見える。&lt;/p></description></item><item><title>2017 年振り返り</title><link>https://itkq.jp/blog/2017/12/31/2017-retrospective/</link><pubDate>Sun, 31 Dec 2017 00:51:52 +0900</pubDate><guid>https://itkq.jp/blog/2017/12/31/2017-retrospective/</guid><description>&lt;p>去年の目標は&lt;a href="https://itkq.jp/blog/2017/01/03/2017-goal/" target="_blank">こちら&lt;/a>。&lt;/p></description></item><item><title>内定者バイトの是非</title><link>https://itkq.jp/blog/2017/12/24/thinking-part-time-job/</link><pubDate>Sun, 24 Dec 2017 20:49:23 +0900</pubDate><guid>https://itkq.jp/blog/2017/12/24/thinking-part-time-job/</guid><description>&lt;p>僕は内定先でバイトをしているが、内定者バイトではない。&lt;/p>
&lt;p>内定者かつバイトというだけで、「内定者バイト」というような特殊な身分ではない。
元々週2 / 時給1500円でバイトをはじめて、その後すぐに時給2000円になった。始めた当初は、大学のほうが結構忙しかったので、週2だけでも働けるという条件だけでかなり嬉しかった。研究が落ち着いてきた後は、週2で研究室の輪講に行き、週3でバイトをする、ようなルーチンだった。大学が忙しいときには今週はすみませんという感じで週0になっていたりかなり柔軟にやらせてもらっていたので、待遇については不満はない。&lt;/p></description></item><item><title>第1回 WSA 研究会に参加した</title><link>https://itkq.jp/blog/2017/12/24/wsa-1/</link><pubDate>Sun, 24 Dec 2017 14:22:45 +0900</pubDate><guid>https://itkq.jp/blog/2017/12/24/wsa-1/</guid><description>&lt;p>開催概要: &lt;a href="http://websystemarchitecture.hatenablog.jp/entry/2017/12/17/133301">http://websystemarchitecture.hatenablog.jp/entry/2017/12/17/133301&lt;/a>&lt;/p>
&lt;h1 id="きっかけ">きっかけ&lt;/h1>
&lt;p>元々のきっかけは、僕が酔っ払って適当にツイートしてたら、&lt;a href="https://twitter.com/itkq/status/927518985431609344" target="_blank">y_uukiさんにいい感じにされてた [Twitter]&lt;/a> ことである。y_uuki さんとは一度リモートで会ったことがあったので、じゃあ物理で会いに行こうということになっていた。それとは別に、もともと WSA 研には興味があった。その理由は主に次の2つである。&lt;/p></description></item><item><title>Vim + LaTeX でいい感じに修論を書く</title><link>https://itkq.jp/blog/2017/11/19/thesis-vim-latex/</link><pubDate>Sun, 19 Nov 2017 02:51:49 +0900</pubDate><guid>https://itkq.jp/blog/2017/11/19/thesis-vim-latex/</guid><description>&lt;p>そろそろ修論を書く季節になった。もちろん Vim と LaTeX で書くつもりだが、ページ数が多くなるとコンパイルに時間がかかって不都合なので、章ごとに分割コンパイルしたいと考えた。
&lt;a href="https://qiita.com/sankichi92/items/1e113fcf6cc045eb64f7" target="_blank">分割した LaTeX ファイルを subfiles を使ってコンパイルする - Qiita&lt;/a> が見つかったが、これまで通り Skim で 1 つのファイルをライブプレビューしたかったので、一時的な .tex ファイルを生成してコンパイルする latexmk のラッパーを書いた。&lt;/p></description></item><item><title>BBR: Congestion-Based Congestion Control とは</title><link>https://itkq.jp/blog/2017/07/31/bbr/</link><pubDate>Mon, 31 Jul 2017 22:30:43 +0900</pubDate><guid>https://itkq.jp/blog/2017/07/31/bbr/</guid><description>&lt;p>最近 &lt;a href="https://cloudplatform.googleblog.com/2017/07/TCP-BBR-congestion-control-comes-to-GCP-your-Internet-just-got-faster.html" target="_blank">TCP BBR congestion control comes to GCP – your Internet just got faster&lt;/a> が話題になっていた．しかし，この記事を読んだ時点での自分の BBR についての知識は，「既存のものよりいい感じにしてくれる輻輳制御」ぐらいだった．これではまずいということで，BBR とはなんなのかについて，既存の輻輳制御にも触れながら，元の論文&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> をメインにまとめた．自分が理解するための文書であるが，一応としての想定読者は，TCP が輻輳制御を行っていることを知っているぐらいの人である．TCP については，拙著の &lt;a href="https://itkq.jp/blog/2017/07/16/tcpip-performance/">TCP/IP とパフォーマンス&lt;/a> に短くまとめてあるので参照できる．&lt;/p></description></item><item><title>TCP/IP とパフォーマンス</title><link>https://itkq.jp/blog/2017/07/16/tcpip-performance/</link><pubDate>Sun, 16 Jul 2017 19:44:55 +0900</pubDate><guid>https://itkq.jp/blog/2017/07/16/tcpip-performance/</guid><description>&lt;p>この文章は、ハイパフォーマンスブラウザネットワーキングを読んで、改めて TCP/IP を自分の中で整理し、パフォーマンスに関する内容を簡単にまとめたものである。
&lt;a href="http://www.ocw.titech.ac.jp/index.php?module=General&amp;amp;action=T0300&amp;amp;GakubuCD=2&amp;amp;GakkaCD=321818&amp;amp;KeiCD=18&amp;amp;course=18&amp;amp;KougiCD=201604718&amp;amp;Nendo=2016&amp;amp;lang=JA&amp;amp;vid=03" target="_blank">情報通信ネットワーク特論&lt;/a>を受講しておりタイミングが良かったという理由もある。&lt;/p></description></item><item><title>新卒就活を終えた</title><link>https://itkq.jp/blog/2017/07/13/get-my-first-job/</link><pubDate>Thu, 13 Jul 2017 00:30:23 +0900</pubDate><guid>https://itkq.jp/blog/2017/07/13/get-my-first-job/</guid><description>&lt;h1 id="tldr">TL;DR&lt;/h1>
&lt;ul>
&lt;li>新卒就職活動を終了したので供養をする&lt;/li>
&lt;li>社会に出る前にやれることをやるぞ&lt;/li>
&lt;/ul></description></item><item><title>Linux におけるファイル I/O の基礎</title><link>https://itkq.jp/blog/2017/05/10/linux-file-and-io/</link><pubDate>Wed, 10 May 2017 16:11:33 +0900</pubDate><guid>https://itkq.jp/blog/2017/05/10/linux-file-and-io/</guid><description>&lt;p>すべてがファイルというモデルの Linux (Unix) において、ファイル I/O (以降単に I/O と書く) を知っておいて損はない。
この記事では、基本的なファイルと関連する I/O について、対応する Linux システムコールも併せて説明する。
次回はこれらを実際に Linux 上で確認する予定。&lt;/p></description></item><item><title>Unix 以外のオペレーティングシステム</title><link>https://itkq.jp/blog/2017/05/01/operating-system-comparison/</link><pubDate>Mon, 01 May 2017 15:14:42 +0900</pubDate><guid>https://itkq.jp/blog/2017/05/01/operating-system-comparison/</guid><description>&lt;p>Unix 以外の簡単な歴史と特徴をまとめる。&lt;/p></description></item><item><title>Unix の歴史と思想</title><link>https://itkq.jp/blog/2017/04/30/unix-history-and-principle/</link><pubDate>Sun, 30 Apr 2017 22:17:37 +0900</pubDate><guid>https://itkq.jp/blog/2017/04/30/unix-history-and-principle/</guid><description>&lt;p>これは、自分がプログラミングを始めた頃に読みたかった（読むべきだった）というつもりの文章である。&lt;/p></description></item><item><title>itamae コードリーディング</title><link>https://itkq.jp/blog/2017/03/19/itamae-reading/</link><pubDate>Sun, 19 Mar 2017 19:25:53 +0900</pubDate><guid>https://itkq.jp/blog/2017/03/19/itamae-reading/</guid><description>&lt;p>元々は NeoVim を導入しようとしていた．その一環で，dotfiles を良い感じにしようとしていて，mitamae によるプロビジョニング設定の &lt;a href="https://github.com/k0kubun/dotfiles" target="_blank">k0kubun/dotfiles&lt;/a> から fork したものを整理していた．NeoBundle の NeoVim 対応版である dein.vim を導入する際，curl が必要だった．itamae の Resource ドキュメントを読むと，&lt;code>http_request&lt;/code> というリソースがあった．これ使えば Docker の ADDコマンド的なことできるのかなと思ったけど詳細が書いてなくて，そういえば itamae 自体どうやって動いてるんだと気になったので読むことにした．&lt;/p>
&lt;p>&lt;a href="https://github.com/itamae-kitchen/itamae/" target="_blank">itamae-kitchen/itamae/&lt;/a>&lt;/p></description></item><item><title>SQL実践入門 読んだ</title><link>https://itkq.jp/blog/2017/03/15/sql-practice/</link><pubDate>Wed, 15 Mar 2017 19:19:27 +0900</pubDate><guid>https://itkq.jp/blog/2017/03/15/sql-practice/</guid><description>&lt;p>メモです．&lt;/p>
&lt;h1 id="3章-式の条件分岐">3章 式の条件分岐&lt;/h1>
&lt;ul>
&lt;li>SQLのパフォーマンスは，テーブルスキャンによる I/O を減らすことが重要．&lt;/li>
&lt;li>手続き的な &lt;code>WHERE&lt;/code>, &lt;code>UNION&lt;/code> による条件分岐，テーブルフルスキャンが複数回行われる．&lt;strong>同テーブル内&lt;/strong>では，&lt;code>SELECT&lt;/code> 句で &lt;code>CASE WHEN&lt;/code> で条件分岐させるとクエリの可読性，実行計画共に良くなることあるので，考えなしに &lt;code>UNION&lt;/code> を使うのは危険．&lt;/li>
&lt;li>ただし，インデックスが使える場合は，「&lt;code>UNION&lt;/code> による複数回のインデックススキャン」と「&lt;code>OR&lt;/code> または &lt;code>IN&lt;/code> による1回のフルスキャン」の勝負になり，&lt;code>UNION&lt;/code> の方が速い場合もある．&lt;/li>
&lt;/ul></description></item><item><title>Fluentd syntax for vim 書いてる</title><link>https://itkq.jp/blog/2017/01/03/fluentd-syntax/</link><pubDate>Tue, 03 Jan 2017 17:54:56 +0900</pubDate><guid>https://itkq.jp/blog/2017/01/03/fluentd-syntax/</guid><description>&lt;p>Fluentdを書く機会があったのだが、Vimがシンタックスハイライトしてくれなかった。&lt;br>
あれーと思ったけど &lt;a href="https://github.com/vim/vim/blob/master/runtime/doc/version8.txt" target="_blank">vim8の新機能&lt;/a> にもFluentdの記述はなかった。&lt;br>
&amp;ldquo;vim fluentd syntax&amp;rdquo; で検索すると、 &lt;a href="https://github.com/yoppi/fluentd.vim" target="_blank">https://github.com/yoppi/fluentd.vim&lt;/a> がヒットするが、Latest Commit が4年前だったのと、自分で使ってみて馴染まなかったので、自分で書いてみている。&lt;/p></description></item><item><title>2017年の抱負</title><link>https://itkq.jp/blog/2017/01/03/2017-goal/</link><pubDate>Tue, 03 Jan 2017 15:52:28 +0900</pubDate><guid>https://itkq.jp/blog/2017/01/03/2017-goal/</guid><description>&lt;h1 id="去年">去年&lt;/h1>
&lt;p>だめだめ&lt;/p></description></item><item><title>ウェブオペレーション 読んだ</title><link>https://itkq.jp/blog/2017/01/03/web-operations/</link><pubDate>Tue, 03 Jan 2017 15:30:11 +0900</pubDate><guid>https://itkq.jp/blog/2017/01/03/web-operations/</guid><description>&lt;p>結論としては、勉強になったし読み物として面白かった。&lt;br>
オペレーションに関係するソフトウェアの特徴・比較・使い方の詳細な記述はないが、
それらの関わりが簡潔にまとめられているおかげで、体系的な理解の助けになった。&lt;/p>
&lt;p>この書籍は18の章から成っており、それぞれ著者が異なる。&lt;br>
ある章の結論が他の章の結論を直接的に否定しているわけではないが、
全体的には、ただ一つの正解は無いと言っているようで、考えさせられた。&lt;/p>
&lt;p>内容が豊富で、すべては噛み砕けていないので、また読む。&lt;/p></description></item><item><title>SQLアンチパターン 読んだ</title><link>https://itkq.jp/blog/2017/01/01/sql-antipattern/</link><pubDate>Sun, 01 Jan 2017 12:38:21 +0900</pubDate><guid>https://itkq.jp/blog/2017/01/01/sql-antipattern/</guid><description>&lt;p>インターネットに読めと言われている気がしたので読んだ。&lt;/p></description></item><item><title>git challenge 4th で優勝してきた</title><link>https://itkq.jp/blog/2016/11/20/git-challenge/</link><pubDate>Sun, 20 Nov 2016 20:36:54 +0900</pubDate><guid>https://itkq.jp/blog/2016/11/20/git-challenge/</guid><description>&lt;h1 id="git-challenge">git challenge&lt;/h1>
&lt;p>以前参加した逆求人イベントで、このコンテストをmixiの中の人に教えていただき、興味を持ったので参加した。&lt;/p>
&lt;p>&lt;a href="https://mixi-recruit.snar.jp/jobboard/detail.aspx?id=VIqrrPf60Mo" target="_blank">git challenge 2016.11.20&lt;/a>&lt;/p></description></item><item><title>LaTeXiTのCLIみたいなのを書いた</title><link>https://itkq.jp/blog/2016/10/27/latexit-cli/</link><pubDate>Thu, 27 Oct 2016 22:14:40 +0900</pubDate><guid>https://itkq.jp/blog/2016/10/27/latexit-cli/</guid><description>&lt;p>&lt;a href="https://www.chachatelier.fr/latexit/" target="_blank"> LaTeXiT &lt;/a>というTeX形式の数式を入力するとTeX形式の画像を出力するツールを知った．&lt;br>
研究発表のスライドを作る場合に，TeX形式の画像を貼り付けたいことがあり，早速インストールした．&lt;/p></description></item><item><title>夏休み読んだ本</title><link>https://itkq.jp/blog/2016/09/19/summer2016-reading/</link><pubDate>Mon, 19 Sep 2016 02:30:10 +0900</pubDate><guid>https://itkq.jp/blog/2016/09/19/summer2016-reading/</guid><description>&lt;p>今年の夏休みは本を読むぞと決めていたので成果を書く．&lt;/p></description></item><item><title>最近のVim+LaTeX事情</title><link>https://itkq.jp/blog/2016/09/04/vim-latex/</link><pubDate>Sun, 04 Sep 2016 14:29:25 +0900</pubDate><guid>https://itkq.jp/blog/2016/09/04/vim-latex/</guid><description>&lt;p>メインで使っているのはMacBookPro Late 2013だが（そろそろ買い換えたい），
MacBookPro Early 2015をバイト先で支給されて自由に使えることになったので，
LaTeX環境を構築しようと思った．&lt;br>
MacTexをインストールしようと思っていたけど，「それDockerでよくない？」と言われて確かに，となった．&lt;br>
なぜ今まで気が付かなかったんだろう．&lt;/p></description></item><item><title>実用Git 読んだ</title><link>https://itkq.jp/blog/2016/04/04/%E5%AE%9F%E7%94%A8git-%E8%AA%AD%E3%82%93%E3%81%A0/</link><pubDate>Mon, 04 Apr 2016 02:20:25 +0900</pubDate><guid>https://itkq.jp/blog/2016/04/04/%E5%AE%9F%E7%94%A8git-%E8%AA%AD%E3%82%93%E3%81%A0/</guid><description>&lt;p>最近自分の Git に対する知識の無さを感じてきたので本を読もうと思っていたら、ちょうど借りる機会があったのでまとめた。Git コマンドの操作をより自信を持って行えるようになった気がする。&lt;/p></description></item><item><title>2016年の抱負</title><link>https://itkq.jp/blog/2016/01/06/2016-goal/</link><pubDate>Wed, 06 Jan 2016 19:23:21 +0900</pubDate><guid>https://itkq.jp/blog/2016/01/06/2016-goal/</guid><description>&lt;h1 id="英語を学ぶ">英語を学ぶ&lt;/h1>
&lt;h3 id="現時点の英語力">現時点の英語力&lt;/h3>
&lt;p>TOEICは800そこそこ、英検2級所持という尺度しか思いつかなかったが、理系大学4年生の平均は上回っているだろうか。&lt;/p></description></item><item><title>Tweetbot for Mac のツイート投稿画面でアカウントを切り替えるショートカット</title><link>https://itkq.jp/blog/2015/12/09/tweetbot-shortcut/</link><pubDate>Wed, 09 Dec 2015 04:08:58 +0900</pubDate><guid>https://itkq.jp/blog/2015/12/09/tweetbot-shortcut/</guid><description>&lt;h2 id="経緯">経緯&lt;/h2>
&lt;p>複数アカウントを使う僕にとって重宝している Twitter クライアント「Tweetbot for Mac」だが、1つだけ弱点がある。
それは、ツイート投稿画面 (⌘+N) でアカウントの切り替え方法がマウスによる操作しかないことだ。&lt;/p></description></item><item><title>学生枠でISUCON5に参加してみたら運良く予選を突破した</title><link>https://itkq.jp/blog/2015/10/09/isucon5-qualifier/</link><pubDate>Fri, 09 Oct 2015 11:25:38 +0900</pubDate><guid>https://itkq.jp/blog/2015/10/09/isucon5-qualifier/</guid><description>&lt;p>もう結構前のことになりますが、ISUCON5 というコンテストに参加しました。&lt;br>
書くことあんまりないからって書かないでいたらチームメイトから書くように煽られてしまったので書きます。&lt;/p></description></item></channel></rss>